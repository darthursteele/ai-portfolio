[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-portfolio"
version = "0.1.0"
description = "Portfolio showcasing AI applications, agentic systems, and prompt engineering work"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "darthursteele", email = "david.arthur.steele@gmail.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    "crewai>=0.70.0",
    "crewai-tools>=0.12.0",
    "openai>=1.50.0",
    "anthropic>=0.34.0",
    "google-generativeai>=0.8.0",
    "chromadb>=0.5.0",
    "faiss-cpu>=1.8.0",
    "sentence-transformers>=3.0.0",
    "beautifulsoup4>=4.12.0",
    "requests>=2.32.0",
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.8.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",
    "black>=24.8.0",
    "isort>=5.13.0",
    "flake8>=7.1.0",
    "mypy>=1.11.0",
    "pre-commit>=3.8.0",
]
advanced = [
    "playwright>=1.48.0",
    "selenium>=4.25.0",
    "langchain>=0.3.0",
]

[project.urls]
Homepage = "https://github.com/darthursteele/ai-portfolio"
Repository = "https://github.com/darthursteele/ai-portfolio"
Issues = "https://github.com/darthursteele/ai-portfolio/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["agentic*", "prompts*", "experiments*"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=agentic",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["agentic/tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["agentic"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]